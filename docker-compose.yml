services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy 
    extra_hosts:
      - "localhost:host-gateway"
    environment:
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: xTsqlMy-TS
      DB_NAME: Web-Engineering
      NODE_ENV: development
      DATABASE_URL: mysql://root:xTsqlMy-TS@db:3306/web-engineering
  frontend:
    build: ./frontend
    ports:
      - "3000:3000" 
    volumes:
      # Mounten des aktuellen Frontend-Ordners in den Container.
      # Dadurch spiegeln sich Änderungen an deinen Frontend-Dateien sofort im Container wider (Hot Reloading).
      - ./frontend:/app
      # Wenn npm install in /app/node_modules zu Problemen führt,
      # kann dies helfen, da es ein separates Volume für node_modules erstellt.
      - /app/node_modules
    depends_on:
      backend:
        condition: service_started
    environment:
      REACT_APP_API_URL: http://localhost:8000 

  db:
    image: mysql:8.0
    container_name: web_engineering_db
    ports:
      - "3306:3306" 
    environment:
      MYSQL_ROOT_PASSWORD: xTsqlMy-TS 
      MYSQL_DATABASE: web-engineering
      # MYSQL_USER: root              
      # MYSQL_PASSWORD: xTsqlMy-TS
    volumes:
      - ./db-service:/docker-entrypoint-initdb.d 
      - mysql_data:/var/lib/mysql 
    healthcheck: 
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pxTsqlMy-TS"] 
      interval: 10s
      timeout: 5s
      retries: 5
volumes: 
  mysql_data: