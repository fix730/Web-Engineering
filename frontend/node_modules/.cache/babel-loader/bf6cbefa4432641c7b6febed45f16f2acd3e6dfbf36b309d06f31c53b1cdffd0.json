{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\DHBW\\\\Web-Engineering\\\\Web-Engineering\\\\frontend\\\\src\\\\pages\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useAppDispatch } from \"../hooks/redux-hooks\";\nimport { login } from \"../slices/authSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const dispatch = useAppDispatch();\n  const [email, setEmail] = useState(\"1\");\n  const [password, setPassword] = useState(\"test123\");\n  const handleLogin = async () => {\n    // This is only a basic validation of inputs. Improve this as needed.\n    if (email && password) {\n      try {\n        await dispatch(login({\n          email,\n          password\n        })).unwrap();\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      // Show an error message.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Login, \"qH9XtwSExFUc1E6IErJdTGMlBAI=\", false, function () {\n  return [useAppDispatch];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","useAppDispatch","login","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","dispatch","email","setEmail","password","setPassword","handleLogin","unwrap","e","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Projects/DHBW/Web-Engineering/Web-Engineering/frontend/src/pages/Login.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useAppDispatch } from \"../hooks/redux-hooks\";\r\nimport { login } from \"../slices/authSlice\";\r\n\r\nfunction Login() {\r\n    const dispatch = useAppDispatch();\r\n    const [email, setEmail] = useState(\"1\");\r\n    const [password, setPassword] = useState(\"test123\");\r\n\r\n    const handleLogin = async () => {\r\n        // This is only a basic validation of inputs. Improve this as needed.\r\n        if (email && password) {\r\n            try {\r\n                await dispatch(\r\n                    login({\r\n                        email,\r\n                        password,\r\n                    })\r\n                ).unwrap();\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        } else {\r\n            // Show an error message.\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>Login</div>\r\n            <button onClick={handleLogin}>Login</button>\r\n        </>\r\n    )\r\n}\r\nexport default Login;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,KAAK,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGR,cAAc,CAAC,CAAC;EACjC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,SAAS,CAAC;EAEnD,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B;IACA,IAAIJ,KAAK,IAAIE,QAAQ,EAAE;MACnB,IAAI;QACA,MAAMH,QAAQ,CACVP,KAAK,CAAC;UACFQ,KAAK;UACLE;QACJ,CAAC,CACL,CAAC,CAACG,MAAM,CAAC,CAAC;MACd,CAAC,CAAC,OAAOC,CAAC,EAAE;QACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACpB;IACJ,CAAC,MAAM;MACH;IAAA;EAER,CAAC;EAED,oBACIZ,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAK;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBnB,OAAA;MAAQoB,OAAO,EAAEV,WAAY;MAAAK,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC9C,CAAC;AAEX;AAACf,EAAA,CA7BQD,KAAK;EAAA,QACON,cAAc;AAAA;AAAAwB,EAAA,GAD1BlB,KAAK;AA8Bd,eAAeA,KAAK;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}